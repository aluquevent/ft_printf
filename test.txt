basic test:
  1.OK
%c and widths:
  102.OK 103.OK 104.OK 105.OK 106.OK 107.OK 108.OK 109.OK 110.OK
%s and widths:
  111.OK 112.OK 113.OK 114.OK 115.OK 116.OK 117.OK 118.OK 119.OK 120.OK 121.OK 122.OK 123.OK 124.OK 125.OK 126.OK 127.OK 128.OK 129.OK 130.OK
%p and widths:
  131.OK 132.OK 133.OK 134.OK 135.OK 136.OK 137.OK 138.OK 139.OK 140.OK 141.OK 142.OK 143.OK 144.OK 145.OK 146.OK 147.OK 148.OK 149.OK 150.OK 151.OK
%d and widths:
  152.OK 153.OK 154.OK 155.OK 156.OK 157.OK 158.OK 159.OK 160.OK 161.OK 162.OK 163.OK 164.OK 165.OK 166.OK 167.OK 168.OK 169.OK 170.OK
%i and widths:
  171.OK 172.OK 173.OK 174.OK 175.OK 176.OK 177.OK 178.OK 179.OK 180.OK 181.OK 182.OK 183.OK 184.OK 185.OK 186.OK 187.OK 188.OK 189.OK
%u and widths:
  190.OK 191.OK 192.OK 193.OK 194.OK 195.OK 196.OK 197.OK 198.OK 199.OK 200.OK 201.OK
%x and widths:
  202.OK 203.OK 204.OK 205.OK 206.OK 207.OK 208.OK 209.OK 210.OK 211.OK 212.OK 213.OK 214.OK 215.OK 216.OK 217.OK 218.OK 219.OK 220.OK 221.OK 222.OK
%X and widths:
  223.OK 224.OK 225.OK 226.OK 227.OK 228.OK 229.OK 230.OK 231.OK 232.OK 233.OK 234.OK 235.OK 236.OK 237.OK 238.OK 239.OK 240.OK 241.OK 242.OK 243.OK
%s and precisions:
  244.OK 245.OK 246.OK 247.OK 248.OK 249.OK 250.OK 251.OK 252.OK 253.OK
  254.KO (Wrong output) (Wrong return)
        Expected: [], return: 0
        Got:      [-], return: 1
     You can rerun this test with sh test 254
     The function was called like this:
   ft_printf("%.s", "-42");

  255.KO (Wrong output) (Wrong return)
        Expected: [], return: 0
        Got:      [-], return: 1
     You can rerun this test with sh test 255
     The function was called like this:
   ft_printf("%.0s", "-42");
256.OK 257.OK 258.OK 259.OK 260.OK 261.OK 262.OK 263.OK 264.OK 265.OK 266.OK 267.OK 268.OK 269.OK 270.OK 271.OK 272.OK
%d and precisions:
  273.OK
  274.KO (Wrong output)
        Expected: [03], return: 2
        Got:      [3\0], return: 2
     You can rerun this test with sh test 274
     The function was called like this:
   ft_printf("%.2d", 3);
275.SIGABRT!
     You can rerun this test with sh test 275
     The function was called like this:
   ft_printf("%.4d", 32);
276.OK 277.OK 278.SIGABRT!
     You can rerun this test with sh test 278
     The function was called like this:
   ft_printf("%.3d", -1);
279.OK 280.OK
  281.KO (Wrong output)
        Expected: [-01234], return: 6
        Got:      [-1234\0], return: 6
     You can rerun this test with sh test 281
     The function was called like this:
   ft_printf("%.5d", -1234);
282.OK 283.OK 284.OK
  285.KO (Wrong output)
        Expected: [-02147483648], return: 12
        Got:      [-2147483648\0], return: 12
     You can rerun this test with sh test 285
     The function was called like this:
   ft_printf("%.11d", (int)-2147483648);
286.SIGABRT!
     You can rerun this test with sh test 286
     The function was called like this:
   ft_printf("%.12d", (int)-2147483648);
287.SIGABRT!
     You can rerun this test with sh test 287
     The function was called like this:
   ft_printf("%.13d", (int)-2147483648);
288.OK 289.OK 290.OK
  291.KO (Wrong output)
        Expected: [02147483647], return: 11
        Got:      [2147483647\0], return: 11
     You can rerun this test with sh test 291
     The function was called like this:
   ft_printf("%.11d", 2147483647);
292.SIGABRT!
     You can rerun this test with sh test 292
     The function was called like this:
   ft_printf("%.12d", 2147483647);
293.OK 294.OK 295.OK 296.OK 297.OK 298.OK 299.SIGABRT!
     You can rerun this test with sh test 299
     The function was called like this:
   ft_printf("I'm gonna watch %.3d", 7);
300.SIGABRT!
     You can rerun this test with sh test 300
     The function was called like this:
   ft_printf("%.3d is the movie I'm gonna watch", 7);
301.SIGABRT!
     You can rerun this test with sh test 301
     The function was called like this:
   ft_printf("Then take these %.7d things and get the hell out of here", 2);
302.SIGABRT!
     You can rerun this test with sh test 302
     The function was called like this:
   ft_printf("Bla %.2di bla %.5dsbla bla %.dx bla %.d", 127, 42, 1023, 0);
303.SIGABRT!
     You can rerun this test with sh test 303
     The function was called like this:
   ft_printf("%.4d%.2d%.20d%.0d%.0d%.d%.d%.d", 127, 0, 1023, 0, (int)-2147483648, 0, 1, (int)-2147483648);

%i and precisions:
  304.OK 305.SIGABRT!
     You can rerun this test with sh test 305
     The function was called like this:
   ft_printf("%.3i", 7);

  306.KO (Wrong output)
        Expected: [03], return: 2
        Got:      [3\0], return: 2
     You can rerun this test with sh test 306
     The function was called like this:
   ft_printf("%.2i", 3);
307.SIGABRT!
     You can rerun this test with sh test 307
     The function was called like this:
   ft_printf("%.4i", 32);
308.OK 309.OK 310.SIGABRT!
     You can rerun this test with sh test 310
     The function was called like this:
   ft_printf("%.3i", -1);
311.OK 312.OK
  313.KO (Wrong output)
        Expected: [-01234], return: 6
        Got:      [-1234\0], return: 6
     You can rerun this test with sh test 313
     The function was called like this:
   ft_printf("%.5i", -1234);
314.OK 315.OK 316.OK
  317.KO (Wrong output)
        Expected: [-02147483648], return: 12
        Got:      [-2147483648\0], return: 12
     You can rerun this test with sh test 317
     The function was called like this:
   ft_printf("%.11i", (int)-2147483648);
318.SIGABRT!
     You can rerun this test with sh test 318
     The function was called like this:
   ft_printf("%.12i", (int)-2147483648);
319.SIGABRT!
     You can rerun this test with sh test 319
     The function was called like this:
   ft_printf("%.13i", (int)-2147483648);
320.OK 321.OK 322.OK
  323.KO (Wrong output)
        Expected: [02147483647], return: 11
        Got:      [2147483647\0], return: 11
     You can rerun this test with sh test 323
     The function was called like this:
   ft_printf("%.11i", 2147483647);
324.SIGABRT!
     You can rerun this test with sh test 324
     The function was called like this:
   ft_printf("%.12i", 2147483647);
325.OK 326.OK 327.OK 328.OK 329.OK 330.OK 331.SIGABRT!
     You can rerun this test with sh test 331
     The function was called like this:
   ft_printf("I'm gonna watch %.3i", 7);
332.SIGABRT!
     You can rerun this test with sh test 332
     The function was called like this:
   ft_printf("%.3i is the movie I'm gonna watch", 7);
333.SIGABRT!
     You can rerun this test with sh test 333
     The function was called like this:
   ft_printf("Then take these %.7i things and get the hell out of here", 2);
334.SIGABRT!
     You can rerun this test with sh test 334
     The function was called like this:
   ft_printf("Bla %.2ii bla %.5isbla bla %.ix bla %.i", 127, 42, 1023, 0);
335.SIGABRT!
     You can rerun this test with sh test 335
     The function was called like this:
   ft_printf("%.4i%.2i%.20i%.0i%.0i%.i%.i%.i", 127, 0, 1023, 0, (int)-2147483648, 0, 1, (int)-2147483648);

%u and precisions:
  336.OK
  337.KO (Wrong output)
        Expected: [01], return: 2
        Got:      [1\0], return: 2
     You can rerun this test with sh test 337
     The function was called like this:
   ft_printf("%.2u", 1);

  338.KO (Wrong output)
        Expected: [00], return: 2
        Got:      [0\0], return: 2
     You can rerun this test with sh test 338
     The function was called like this:
   ft_printf("%.2u", 0);
339.OK 340.OK 341.OK 342.SIGABRT!
     You can rerun this test with sh test 342
     The function was called like this:
   ft_printf("%.20u", 30000);
343.OK 344.OK 345.OK 346.OK
  347.KO (Wrong output)
        Expected: [04294967295], return: 11
        Got:      [4294967295\0], return: 11
     You can rerun this test with sh test 347
     The function was called like this:
   ft_printf("%.11u", (unsigned int)-1);
348.OK 349.OK 350.OK 351.OK
  352.KO (Wrong output)
        Expected: [04294967295ps a big number], return: 26
        Got:      [4294967295\0ps a big number], return: 26
     You can rerun this test with sh test 352
     The function was called like this:
   ft_printf("%.11ups a big number", (unsigned int)-1);
353.OK 354.OK 355.OK 356.OK 357.OK
  358.KO (Wrong output)
        Expected: [the number is 04294967295], return: 25
        Got:      [the number is 4294967295\0], return: 25
     You can rerun this test with sh test 358
     The function was called like this:
   ft_printf("the number is %.11u", (unsigned int)-1);

  359.KO (Wrong output)
        Expected: [the number is 04294967295], return: 25
        Got:      [the number is 4294967295\0], return: 25
     You can rerun this test with sh test 359
     The function was called like this:
   ft_printf("the number is %.11u", (unsigned int)-1);
360.OK 361.SIGABRT!
     You can rerun this test with sh test 361
     The function was called like this:
   ft_printf("%.4us a big number", 0);
362.OK 363.OK 364.SIGABRT!
     You can rerun this test with sh test 364
     The function was called like this:
   ft_printf("the number is %.5u", 0);
365.SIGABRT!
     You can rerun this test with sh test 365
     The function was called like this:
   ft_printf("%u%.5u%.0u%.u%.9u", 5, 55, 2, 0, 42);
366.SIGABRT!
     You can rerun this test with sh test 366
     The function was called like this:
   ft_printf("%us%.5ui%.0uc%.up%.9ux", 5, 55, 2, 0, 42);

%x and precisions:
  367.OK 368.SIGABRT!
     You can rerun this test with sh test 368
     The function was called like this:
   ft_printf("%.4x", 11);
369.OK 370.OK 371.SIGABRT!
     You can rerun this test with sh test 371
     The function was called like this:
   ft_printf("%.10x", -1);
372.SIGABRT!
     You can rerun this test with sh test 372
     The function was called like this:
   ft_printf("%.14x", -1);
373.SIGABRT!
     You can rerun this test with sh test 373
     The function was called like this:
   ft_printf("%.8x", 0);
374.OK 375.SIGABRT!
     You can rerun this test with sh test 375
     The function was called like this:
   ft_printf("%.20x", 30000);
376.OK 377.OK
  378.KO (Wrong output)
        Expected: [0ffffffff], return: 9
        Got:      [ffffffff\0], return: 9
     You can rerun this test with sh test 378
     The function was called like this:
   ft_printf("%.9x", (unsigned int)-1);
379.SIGABRT!
     You can rerun this test with sh test 379
     The function was called like this:
   ft_printf("%.10x", (unsigned int)-1);
380.SIGABRT!
     You can rerun this test with sh test 380
     The function was called like this:
   ft_printf("%.11x", (unsigned int)-1);
381.SIGABRT!
     You can rerun this test with sh test 381
     The function was called like this:
   ft_printf("%.10xis a big number", (unsigned int)-1);
382.OK 383.OK
  384.KO (Wrong output)
        Expected: [0ffffffffxs a big number], return: 24
        Got:      [ffffffff\0xs a big number], return: 24
     You can rerun this test with sh test 384
     The function was called like this:
   ft_printf("%.9xxs a big number", (unsigned int)-1);
385.SIGABRT!
     You can rerun this test with sh test 385
     The function was called like this:
   ft_printf("%.11xps a big number", (unsigned int)-1);
386.OK 387.OK 388.OK
  389.KO (Wrong output)
        Expected: [the number is 0ffffffff], return: 23
        Got:      [the number is ffffffff\0], return: 23
     You can rerun this test with sh test 389
     The function was called like this:
   ft_printf("the number is %.9x", (unsigned int)-1);
390.SIGABRT!
     You can rerun this test with sh test 390
     The function was called like this:
   ft_printf("the number is %.10x", (unsigned int)-1);
391.SIGABRT!
     You can rerun this test with sh test 391
     The function was called like this:
   ft_printf("the number is %.11x", (unsigned int)-1);
392.SIGABRT!
     You can rerun this test with sh test 392
     The function was called like this:
   ft_printf("the number is %.11x", (unsigned int)-1);
393.OK 394.SIGABRT!
     You can rerun this test with sh test 394
     The function was called like this:
   ft_printf("%.4xs a big number", 0);
395.OK 396.OK 397.SIGABRT!
     You can rerun this test with sh test 397
     The function was called like this:
   ft_printf("the number is %.5x", 0);
398.SIGABRT!
     You can rerun this test with sh test 398
     The function was called like this:
   ft_printf("%x%.5x%.0x%.x%.9x", 5, 55, 2, 0, 42);
399.SIGABRT!
     You can rerun this test with sh test 399
     The function was called like this:
   ft_printf("%xs%.5xi%.0xc%.xp%.9xu", 5, 55, 2, 0, 42);

%X and precisions:
  400.OK 401.SIGABRT!
     You can rerun this test with sh test 401
     The function was called like this:
   ft_printf("%.4X", 11);
402.OK 403.OK 404.SIGABRT!
     You can rerun this test with sh test 404
     The function was called like this:
   ft_printf("%.10X", -1);
405.SIGABRT!
     You can rerun this test with sh test 405
     The function was called like this:
   ft_printf("%.14X", -1);
406.SIGABRT!
     You can rerun this test with sh test 406
     The function was called like this:
   ft_printf("%.8X", 0);
407.OK 408.SIGABRT!
     You can rerun this test with sh test 408
     The function was called like this:
   ft_printf("%.20X", 30000);
409.OK 410.OK
  411.KO (Wrong output)
        Expected: [0FFFFFFFF], return: 9
        Got:      [FFFFFFFF\0], return: 9
     You can rerun this test with sh test 411
     The function was called like this:
   ft_printf("%.9X", (unsigned int)-1);
412.SIGABRT!
     You can rerun this test with sh test 412
     The function was called like this:
   ft_printf("%.10X", (unsigned int)-1);
413.SIGABRT!
     You can rerun this test with sh test 413
     The function was called like this:
   ft_printf("%.11X", (unsigned int)-1);
414.SIGABRT!
     You can rerun this test with sh test 414
     The function was called like this:
   ft_printf("%.10Xis a big number", (unsigned int)-1);
415.OK 416.OK
  417.KO (Wrong output)
        Expected: [0FFFFFFFFXs a big number], return: 24
        Got:      [FFFFFFFF\0Xs a big number], return: 24
     You can rerun this test with sh test 417
     The function was called like this:
   ft_printf("%.9XXs a big number", (unsigned int)-1);
418.SIGABRT!
     You can rerun this test with sh test 418
     The function was called like this:
   ft_printf("%.11Xps a big number", (unsigned int)-1);
419.OK 420.OK 421.OK
  422.KO (Wrong output)
        Expected: [the number is 0FFFFFFFF], return: 23
        Got:      [the number is FFFFFFFF\0], return: 23
     You can rerun this test with sh test 422
     The function was called like this:
   ft_printf("the number is %.9X", (unsigned int)-1);
423.SIGABRT!
     You can rerun this test with sh test 423
     The function was called like this:
   ft_printf("the number is %.10X", (unsigned int)-1);
424.SIGABRT!
     You can rerun this test with sh test 424
     The function was called like this:
   ft_printf("the number is %.11X", (unsigned int)-1);
425.SIGABRT!
     You can rerun this test with sh test 425
     The function was called like this:
   ft_printf("the number is %.11X", (unsigned int)-1);
426.OK 427.SIGABRT!
     You can rerun this test with sh test 427
     The function was called like this:
   ft_printf("%.4Xs a big number", 0);
428.OK 429.OK 430.SIGABRT!
     You can rerun this test with sh test 430
     The function was called like this:
   ft_printf("the number is %.5X", 0);
431.SIGABRT!
     You can rerun this test with sh test 431
     The function was called like this:
   ft_printf("%X%.5X%.0X%.X%.9X", 5, 55, 2, 0, 42);
432.SIGABRT!
     You can rerun this test with sh test 432
     The function was called like this:
   ft_printf("%Xs%.5Xi%.0Xc%.Xp%.9Xu", 5, 55, 2, 0, 42);

%c, widths and -:
  433.OK 434.OK 435.OK 436.OK 437.OK 438.OK 439.OK 440.OK 441.OK 442.OK
%s, widths, precisions and -:
  443.OK 444.OK 445.OK 446.OK 447.OK 448.OK
%p, widths and -:
  449.OK 450.OK 451.OK 452.OK 453.OK 454.OK 455.OK
%d, widths, precisions and -:
  456.OK 457.OK 458.OK 459.OK 460.OK 461.OK 462.OK 463.OK 464.OK 465.OK 466.OK 467.OK 468.OK 469.OK 470.OK 471.OK 472.OK 473.OK 474.OK 475.OK 476.OK 477.OK 478.OK 479.OK 480.OK 481.OK 482.OK
  483.KO (Wrong output)
        Expected: [-010], return: 4
        Got:      [-10\0], return: 4
     You can rerun this test with sh test 483
     The function was called like this:
   ft_printf("%-.3d", -10);
484.OK
  485.KO (Wrong output)
        Expected: [-05000], return: 6
        Got:      [-5000\0], return: 6
     You can rerun this test with sh test 485
     The function was called like this:
   ft_printf("%-.5d", -5000);
486.OK 487.OK 488.SIGABRT!
     You can rerun this test with sh test 488
     The function was called like this:
   ft_printf("%-1.8d", 0);
489.SIGABRT!
     You can rerun this test with sh test 489
     The function was called like this:
   ft_printf("%-1.9d", 1);
490.SIGABRT!
     You can rerun this test with sh test 490
     The function was called like this:
   ft_printf("%-1.10d", 10);
491.OK 492.SIGABRT!
     You can rerun this test with sh test 492
     The function was called like this:
   ft_printf("%-1.6d", 5000);
493.OK 494.OK 495.SIGABRT!
     You can rerun this test with sh test 495
     The function was called like this:
   ft_printf("%-1.12d", 2147483647);
error opening stdout_pipe
